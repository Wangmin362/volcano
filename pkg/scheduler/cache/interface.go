/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cache

import (
	v1 "k8s.io/api/core/v1"
	"k8s.io/client-go/informers"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/record"

	"volcano.sh/volcano/pkg/scheduler/api"
	"volcano.sh/volcano/pkg/scheduler/capabilities/volumebinding"
)

// Cache collects pods/nodes/queues information
// and provides information snapshot
type Cache interface {
	// Run start informer  TODO 内部会启动各种Informer用于从APIServer同步Cache关心的各种信息
	Run(stopCh <-chan struct{})

	// Snapshot deep copy overall cache information into snapshot
	// 1、volcano在一个Session中执行对于所有当前监听到的Job的调度，那么问题来了，在volcano调度的过程中还可能会监听到新的Job, 可能会
	// 引发一些问题。因此volcano在开启一个Session的时候，会把缓存中Job以及其相关的信息拷贝一份，然后在这个拷贝的信息上进行调度
	Snapshot() *api.ClusterInfo

	// WaitForCacheSync waits for all cache synced
	WaitForCacheSync(stopCh <-chan struct{})

	// AddBindTask binds Task to the target host.
	// TODO(jinzhej): clean up expire Tasks.
	AddBindTask(task *api.TaskInfo) error

	// BindPodGroup Pod/PodGroup to cluster
	BindPodGroup(job *api.JobInfo, cluster string) error

	// Evict evicts the task to release resources.
	// TODO 驱逐的到底是Job还是Task?
	Evict(task *api.TaskInfo, reason string) error

	// RecordJobStatusEvent records related events according to job status.
	// Deprecated: remove it after removed PDB support.
	RecordJobStatusEvent(job *api.JobInfo, updatePG bool)

	// UpdateJobStatus puts job in backlog for a while.
	// TODO 这里更新的Job状态会反向更新到APIServer么？ 理论上应该需要更新APIServer，这样用户才能看到最新的Job状态
	UpdateJobStatus(job *api.JobInfo, updatePG bool) (*api.JobInfo, error)

	// UpdateQueueStatus update queue status.
	// TODO 同理，我猜测这里更新的Queue状态也会更新到APIServer当中
	UpdateQueueStatus(queue *api.QueueInfo) error

	// GetPodVolumes get pod volume on the host
	GetPodVolumes(task *api.TaskInfo, node *v1.Node) (*volumebinding.PodVolumes, error)

	// AllocateVolumes allocates volume on the host to the task
	AllocateVolumes(task *api.TaskInfo, hostname string, podVolumes *volumebinding.PodVolumes) error

	// BindVolumes binds volumes to the task
	BindVolumes(task *api.TaskInfo, volumes *volumebinding.PodVolumes) error

	// RevertVolumes clean cache generated by AllocateVolumes
	RevertVolumes(task *api.TaskInfo, podVolumes *volumebinding.PodVolumes)

	// Client returns the kubernetes clientSet, which can be used by plugins
	Client() kubernetes.Interface

	// ClientConfig returns the rest config
	ClientConfig() *rest.Config

	// UpdateSchedulerNumaInfo TODO Volcano中是如何处理NUMA相关信息的？
	UpdateSchedulerNumaInfo(sets map[string]api.ResNumaSets) error

	// SharedInformerFactory return scheduler SharedInformerFactory
	SharedInformerFactory() informers.SharedInformerFactory

	// SetMetricsConf set the metrics server related configuration
	SetMetricsConf(conf map[string]string)

	// EventRecorder returns the event recorder
	EventRecorder() record.EventRecorder
}

// VolumeBinder interface for allocate and bind volumes
type VolumeBinder interface {
	GetPodVolumes(task *api.TaskInfo, node *v1.Node) (*volumebinding.PodVolumes, error)
	RevertVolumes(task *api.TaskInfo, podVolumes *volumebinding.PodVolumes)
	AllocateVolumes(task *api.TaskInfo, hostname string, podVolumes *volumebinding.PodVolumes) error
	BindVolumes(task *api.TaskInfo, podVolumes *volumebinding.PodVolumes) error
}

// Binder interface for binding task and hostname
type Binder interface {
	Bind(kubeClient kubernetes.Interface, tasks []*api.TaskInfo) ([]*api.TaskInfo, error)
}

// Evictor interface for evict pods
type Evictor interface {
	Evict(pod *v1.Pod, reason string) error
}

// StatusUpdater updates pod with given PodCondition
type StatusUpdater interface {
	UpdatePodCondition(pod *v1.Pod, podCondition *v1.PodCondition) (*v1.Pod, error)
	UpdatePodGroup(pg *api.PodGroup) (*api.PodGroup, error)
	UpdateQueueStatus(queue *api.QueueInfo) error
}

// BatchBinder updates podgroup or job information
type BatchBinder interface {
	Bind(job *api.JobInfo, cluster string) (*api.JobInfo, error)
}
